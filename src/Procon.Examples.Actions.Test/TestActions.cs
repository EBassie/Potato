using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Procon.Core.Connections.Plugins;
using Procon.Core.Shared;
using Procon.Net;
using Procon.Net.Actions;

namespace Procon.Examples.Actions.Test {
    [TestFixture]
    public class TestActions {
        /// <summary>
        /// Test for you to debug.
        /// Set a breakpoint within Procon.Examples.Actions.KickPlayer
        /// </summary>
        [Test]
        public void TestKickPlayerAction() {
            // Create a new plugin controller to load up the test plugin
            PluginController plugins = new PluginController();

            // Now setup a mock handler to accept actions from the plugin
            MockNetworkLayer layer = new MockNetworkLayer();
            plugins.BubbleObjects.Add(layer);

            plugins.Execute();

            // Enable the single plugin that was loaded, otherwise it won't recieve any tunneled
            // commands.
            plugins.Tunnel(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.PluginsEnable,
                Scope = {
                    PluginGuid = plugins.Plugins.First().PluginModel.PluginGuid
                }
            });

            CommandResultArgs result = plugins.Tunnel(new Command() {
                Name = "KickPlayer",
                // We're cheating a little bit here and just saying the command came from
                // "local" as in it was generated by Procon itself.
                Origin = CommandOrigin.Local
            });

            Assert.AreEqual("KickPlayer.Result.packet: Client Request 100 [0-admin.kickPlayer] [1-Phogue]", result.Now.Content.First());
            Assert.AreEqual("KickPlayer.Result.packet: Client Request 101 [0-admin.say] [1-This is a reason to kick this person] [2-player] [3-Phogue]", result.Now.Content.Last());
        }

        /// <summary>
        /// Test for you to debug.
        /// Set a breakpoint within Procon.Examples.Actions.DeferredKickPlayer
        /// </summary>
        [Test]
        public void TestDeferredKickPlayerAction() {
            // Create a new plugin controller to load up the test plugin
            PluginController plugins = new PluginController();

            // Now setup a mock handler to accept actions from the plugin
            MockNetworkLayer layer = new MockNetworkLayer();
            plugins.BubbleObjects.Add(layer);
            plugins.Execute();

            // Enable the single plugin that was loaded, otherwise it won't recieve any tunneled
            // commands.
            plugins.Tunnel(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.PluginsEnable,
                Scope = {
                    PluginGuid = plugins.Plugins.First().PluginModel.PluginGuid
                }
            });

            // Now finally poke the test plugin.
            CommandResultArgs result = plugins.Tunnel(new Command() {
                Name = "DeferredKickPlayer",
                // We're cheating a little bit here and just saying the command came from
                // "local" as in it was generated by Procon itself.
                Origin = CommandOrigin.Local
            });

            // Fake client events from the networking layer.
            layer.Waiting.Done += (action, requests, responses) => {
                plugins.PluginFactory.ClientEvent(new ClientEventArgs() {
                    EventType = ClientEventType.ClientActionDone,
                    ConnectionState = ConnectionState.ConnectionLoggedIn,
                    Now = new ClientEventData() {
                        Packets = responses
                    },
                    Then = new ClientEventData() {
                        Actions = new List<NetworkAction>() {
			                action
		                },
                        Packets = requests
                    }
                });
            };

            // Now fire off the mock responses (you'll see the above anonymous method that fires
            // a ClientEvent called during this method)
            layer.MockResponses();

            Assert.AreEqual("KickPlayer.Result.packet: Client Request 100 [0-admin.kickPlayer] [1-Phogue]", result.Now.Content.First());
            Assert.AreEqual("KickPlayer.Result.packet: Client Request 101 [0-admin.say] [1-This is a reason to kick this person] [2-player] [3-Phogue]", result.Now.Content.Last());
        }
    }
}
