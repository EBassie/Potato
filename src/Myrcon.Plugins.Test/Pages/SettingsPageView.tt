<#@ template debug="false" hostspecific="false" language="C#" #>


<html>
	<head>
		<title>This is my title</title>
	</head>
	<body>
		<div id="content">
			<h1>Settings</h1>
			This is the settings page for this plugin. Check out the <a href="/">Index</a>.

			<button id="javascript-navigation-test">Javascript Navigation to Index</button>

			<button id="javascript-data-test">Javascript Command with JSON response</button>
		</div>

		<script type="application/javascript">

			define('settings_view', [
				'jquery',
				'lodash',
				'backbone',
				'proxy'
			], function($, _, Backbone, proxy) {
				return Backbone.View.extend({
					el: null,
					model: proxy.model,
					events: {
						'click #javascript-navigation-test': '_on_javascript_navigation_test_click',
						'click #javascript-data-test': '_on_javascript_data_test_click'
					},
					initialize: function() {
						console.log("Settings -> view -> initialize");
						
						this.listenTo(this.model, 'response', this._on_response);
						this.listenTo(this.model, 'destructing', this._on_destructing);
					},
					_on_javascript_navigation_test_click: function() {
						console.log("Settings -> view -> _on_javascript_navigation_test_click");

						this.model.request({
							command: '/'
						});
					},
					_on_javascript_data_test_click: function() {
						console.log("Settings -> view -> _on_javascript_data_test_click");

						this.model.request({
							command: 'TestPluginsCommandsZeroParameters'
						});
					},
					_on_response: function(request, response) {
						console.log("Settings -> view -> _on_response");
						
						console.log(request);
						console.log(response);
					},
					_on_destructing: function() {
						console.log("Settings -> destructing");

						this.remove();
					}
				});
			});

			require([
				'jquery',
				'lodash',
				'backbone',
				'proxy',
				'settings_view'
			], function($, _, Backbone, proxy, Settings_view) {
				console.log("Settings -> Loaded");

				var view = new Settings_view({
					// Rebind as the original element may not exist when this view is instantiated twice.
					el: $('#content')
				});
			});
		</script>
	</body>
</html>