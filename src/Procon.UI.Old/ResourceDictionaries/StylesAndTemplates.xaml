<!--
// Copyright 2011 Cameron 'Imisnew2' Gunnin
// 
// http://www.phogue.net
//  
// This file is part of Procon 2.
// 
// Procon 2 is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Procon 2 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Procon 2.  If not, see<http://www.gnu.org/licenses/>.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:core="clr-namespace:Procon.Core.Interfaces;assembly=Procon.Core">
    <!-- Base Brushes -->
    <SolidColorBrush x:Key="BaseBackgroundBrush"    Color="#0F1B29" />   <!-- Behind Everything -->
    <SolidColorBrush x:Key="PopupBackgroundBrush"   Color="#88000000" /> <!-- Dims Everyting    -->

    <!-- Universal Control Brushes -->
    <SolidColorBrush x:Key="ControlBackgroundBrush" Color="#F9F9F9" /> <!-- Normal   -->
    <SolidColorBrush x:Key="ControlLightBackBrush"  Color="#FFFFFF" /> <!-- Disabled -->
    <SolidColorBrush x:Key="ControlDarkBackBrush"   Color="#D9D9D9" /> <!-- Sub Area -->
    
    <SolidColorBrush x:Key="ControlForegroundBrush" Color="#111" /> <!-- Normal   -->
    <SolidColorBrush x:Key="ControlLightForeBrush"  Color="#888" /> <!-- Disabled -->
    <SolidColorBrush x:Key="ControlDarkForeBrush"   Color="#000" /> <!-- Sub Font -->
    
    <SolidColorBrush x:Key="ControlHighlightedBrush" Color="#EEE" /> <!-- Hovered -->
    <SolidColorBrush x:Key="ControlSelectedBrush"    Color="#DDD" /> <!-- Clicked -->
    <SolidColorBrush x:Key="ControlBorderBrush"      Color="#CCC" /> <!-- Border  -->
    
    <!-- Drawing Brushes -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />
    
    <!-- Text Brushes -->
    <SolidColorBrush x:Key="NormalTextColor"    Color="Black" />
    <SolidColorBrush x:Key="TopHeaderTextColor" Color="Blue" />
    <SolidColorBrush x:Key="SubHeaderTextColor" Color="Black" />

    <!-- Text Sizes -->
    <sys:Double x:Key="NormalTextSize">11</sys:Double>
    <sys:Double x:Key="TopHeaderTextSize">11</sys:Double>
    <sys:Double x:Key="SubHeaderTextSize">11</sys:Double>



    <!-- Styling for all the labels -->
    <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
        <Setter Property="Padding"                  Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <!-- Top Header Label Style -->
    <Style x:Key="style_LabelTopHeader" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{StaticResource TopHeaderTextColor}" />
        <Setter Property="FontSize"   Value="{StaticResource TopHeaderTextSize}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <!-- Sub Header Label Style -->
    <Style x:Key="style_LabelSubHeader" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Foreground" Value="{StaticResource SubHeaderTextColor}" />
        <Setter Property="FontSize"   Value="{StaticResource SubHeaderTextSize}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>

    
    
    <!-- Styling for all the text blocks -->
    <Style x:Key="{x:Type TextBlock}" TargetType="{x:Type TextBlock}">
        <Setter Property="Padding"           Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <!-- Top Header TextBlock Style -->
    <Style x:Key="style_TextBlockTopHeader" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground"   Value="{StaticResource TopHeaderTextColor}" />
        <Setter Property="FontSize"     Value="{StaticResource TopHeaderTextSize}" />
        <Setter Property="FontWeight"   Value="Bold" />
        <Setter Property="TextWrapping" Value="NoWrap" />
    </Style>
    <!-- Sub Header TextBlock Style -->
    <Style x:Key="style_TextBlockSubHeader" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground"   Value="{StaticResource SubHeaderTextColor}" />
        <Setter Property="FontSize"     Value="{StaticResource SubHeaderTextSize}" />
        <Setter Property="FontWeight"   Value="Bold" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>


    
    <!-- Styling for all the buttons -->
    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="Padding" Value="3, 0" />
    </Style>
    <Style x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Padding" Value="3, 0" />
    </Style>



    <!-- Styles for the various edit/delete buttons on the main window. -->
    <!-- Remove Interface -->
    <Style x:Key="style_RemoveInterfaceButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="3, 0" />
        <Setter Property="Margin"  Value="3, 0, 0, 0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=combobox_Interfaces, Path=SelectedItem}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=combobox_Interfaces, Path=SelectedItem, Converter={StaticResource isLocalInterConv}}" Value="True">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- Edit Connection -->
    <Style x:Key="style_EditConnectionToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="3, 0" />
        <Setter Property="Margin"  Value="0, 0, 3, 0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=listbox_Connections, Path=SelectedItem}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- Remove Connection -->
    <Style x:Key="style_RemoveConnectionButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="3, 0" />
        <Setter Property="Margin"  Value="0, 0, 3, 0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=listbox_Connections, Path=SelectedItem}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- View Connection -->
    <Style x:Key="style_ViewConnectionButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="3, 0" />
        <Setter Property="Margin"  Value="0, 0, 3, 0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=listbox_Connections, Path=SelectedItem}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- Edit Group -->
    <Style x:Key="style_EditGroupToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="3, 0" />
        <Setter Property="Margin"  Value="0, 0, 3, 0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=listbox_Groups, Path=SelectedItem}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- Remove Group -->
    <Style x:Key="style_RemoveGroupButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="3, 0" />
        <Setter Property="Margin"  Value="0, 0, 3, 0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=listbox_Groups, Path=SelectedItem}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- Edit Account -->
    <Style x:Key="style_EditAccountToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="3, 0" />
        <Setter Property="Margin"  Value="0, 0, 3, 0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=listbox_Accounts, Path=SelectedItem}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- Remove Account -->
    <Style x:Key="style_RemoveAccountButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="3, 0" />
        <Setter Property="Margin"  Value="0, 0, 3, 0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=listbox_Accounts, Path=SelectedItem}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- Install Package -->
    <Style x:Key="style_InstallPackageButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="IsEnabled" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding ElementName=listbox_Packages, Path=SelectedItem}" Value="{x:Null}">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=listbox_Packages, Path=SelectedItem.State}" Value="NotInstalled">
                <Setter Property="IsEnabled" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=listbox_Packages, Path=SelectedItem.State}" Value="UpdateAvailable">
                <Setter Property="IsEnabled" Value="True" />
            </DataTrigger>
        </Style.Triggers>
    </Style>



    <!-- Player List DataGrid Style -->
    <Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}">
        <Setter Property="CanUserAddRows"    Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="HeadersVisibility"   Value="Column" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="IsReadOnly"          Value="True" />
        <Setter Property="VerticalGridLinesBrush"   Value="LightGray" />
        <Setter Property="HorizontalGridLinesBrush" Value="LightGray" />
        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="Foreground" Value="Black" />
                    <Setter Property="Background" Value="White" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- Styling for all the different menu items -->
    <!-- Separators -->
    <Style x:Key="style_MenuItemSeparator" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="2" />
        <Setter Property="Margin" Value="3, 1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{StaticResource ControlBorderBrush}"
                            Background="{StaticResource ControlLightBackBrush}"
                            BorderThickness="0,1,0,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- TopLevelHeaders -->
    <ControlTemplate x:Key="tmp_MenuItemTopLevelHeader" TargetType="{x:Type MenuItem}">
        <Border Name="PART_Border" >
            <Grid>
                <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
                <Popup Name="PART_Popup"
                       Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                    <Border Name="PART_SubmenuBorder"
                            SnapsToDevicePixels="True" BorderThickness="1"
                            Background="{StaticResource ControlBackgroundBrush}"
                            BorderBrush="{StaticResource ControlBorderBrush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="PART_Border" Property="Background"  Value="{StaticResource ControlHighlightedBrush}" />
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="Transparent" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="PART_SubmenuBorder" Property="CornerRadius"  Value="0,0,4,4" />
                <Setter TargetName="PART_SubmenuBorder" Property="Padding"       Value="0,0,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource ControlLightForeBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- TopLevelItems -->
    <ControlTemplate x:Key="tmp_MenuItemTopLevelItem" TargetType="{x:Type MenuItem}">
        <Border Name="PART_Border" >
            <Grid>
                <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="PART_Border" Property="Background" Value="{StaticResource ControlHighlightedBrush}"/>
                <Setter TargetName="PART_Border" Property="BorderBrush" Value="Transparent"/>
        </Trigger>
        <Trigger Property="IsEnabled" Value="False">
            <Setter Property="Foreground" Value="{StaticResource ControlLightForeBrush}"/>
        </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- SubmenuHeaders -->
    <ControlTemplate x:Key="tmp_MenuItemSubLevelHeader" TargetType="{x:Type MenuItem}">
        <Border Name="PART_Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="PART_Icon"
                                  Width="15" Height="15" Margin="4,0,12,0"
                                  VerticalAlignment="Center" ContentSource="Icon" />
                <ContentPresenter Name="PART_HeaderHost"
                                  Grid.Column="1"
                                  VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
                <TextBlock Name="PART_InputGestureText"
                           DockPanel.Dock="Right" Grid.Column="2" Margin="5,2,2,2"
                           Text="{TemplateBinding InputGestureText}"/>
                <Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{StaticResource GlyphBrush}" />
                <Popup Name="PART_Popup"
                       Placement="Right" HorizontalOffset="-4" IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                    <Border Name="PART_SubmenuBorder"
                            SnapsToDevicePixels="True" BorderThickness="1"
                            Background="{StaticResource ControlBackgroundBrush}"
                            BorderBrush="{StaticResource ControlBorderBrush}">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="PART_Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="PART_Border" Property="Background" Value="{StaticResource ControlSelectedBrush}"/>
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="PART_SubmenuBorder" Property="Padding" Value="3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ControlLightForeBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- SubmenuItems -->
    <ControlTemplate x:Key="tmp_MenuItemSubLevelItem" TargetType="{x:Type MenuItem}">
        <Border Name="PART_Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <StackPanel Orientation="Horizontal" Grid.Column="0">
                    <ContentPresenter Name="PART_Icon"
                                      Width="15" Height="15" Margin="4,0,12,0"
                                      VerticalAlignment="Center" ContentSource="Icon" />
                    <Border Name="PART_Check" 
                            Width="15" Height="15" Margin="4,0,8,0"
                            Visibility="Collapsed" BorderThickness="1"
                            Background="{StaticResource ControlBackgroundBrush}"
                            BorderBrush="{StaticResource ControlBorderBrush}">
                        <Path Name="PART_CheckMark"
                              Width="8" Height="8"
                              Visibility="Collapsed" SnapsToDevicePixels="False" 
                              Stroke="{StaticResource GlyphBrush}" StrokeThickness="2"
                              Data="M 0 0 L 8 8 M 0 8 L 8 0" />
                    </Border>
                </StackPanel>
                <ContentPresenter Name="PART_HeaderHost"
                                  Grid.Column="1"
                                  VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
                <TextBlock Name="PART_InputGestureText"
                           DockPanel.Dock="Right" Grid.Column="2" Margin="5,2,0,2"
                           Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="PART_Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="PART_CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="PART_Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_Icon"  Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="PART_Border" Property="Background" Value="{StaticResource ControlSelectedBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ControlLightForeBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- MenuItem Style -->
    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource tmp_MenuItemTopLevelHeader}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource tmp_MenuItemTopLevelItem}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource tmp_MenuItemSubLevelHeader}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource tmp_MenuItemSubLevelItem}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>