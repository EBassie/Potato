using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;
using Procon.Core;
using Procon.Core.Connections.Plugins;
using Procon.Core.Database;
using Procon.Core.Shared;
using Procon.Core.Shared.Models;
using Procon.Core.Variables;

namespace Procon.Examples.Database.Test {
    [TestFixture]
    public class TestDatabase {

        /// <summary>
        /// Opens a database driver to a SQLite in-memory database
        /// </summary>
        /// <returns>this</returns>
        public static DatabaseController OpenDatabaseDriver() {
            VariableController variables = new VariableController();

            DatabaseController database = new DatabaseController() {
                Variables = variables
            }.Execute() as DatabaseController;
            
            variables.Set(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.VariablesSet
            }, CommonVariableNames.DatabaseDriverName, "SQLite");

            variables.Set(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.VariablesSet
            }, CommonVariableNames.DatabaseMemory, true);
            
            return database;
        }

        /// <summary>
        /// Test for you to debug.
        /// Set a breakpoint within Procon.Examples.Database.SaveOneUser
        /// </summary>
        [Test, Ignore]
        public void TestSavingSingleRowFromModel() {

            // Create a new plugin controller to load up the test plugin
            PluginController plugins = new PluginController() {
                BubbleObjects = {
                    TestDatabase.OpenDatabaseDriver()
                }
            };

            plugins.Execute();

            // Enabling the plugin should then load up the migrations and execute them.
            // See Procon.Examples.Database.GenericEvent
            plugins.Tunnel(new Command() {
                Origin = CommandOrigin.Local,
                CommandType = CommandType.PluginsEnable,
                Scope = {
                    PluginGuid = plugins.Plugins.First().PluginModel.PluginGuid
                }
            });

            CommandResultArgs result = plugins.Tunnel(new Command() {
                Name = "SaveOneUser",
                // We're cheating a little bit here and just saying the command came from
                // "local" as in it was generated by Procon itself.
                Origin = CommandOrigin.Local
            });

            Assert.AreEqual(true, result.Success);
            Assert.AreEqual(CommandResultType.Success, result.Status);
        }
    }
}
